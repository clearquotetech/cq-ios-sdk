// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ClearQuoteSDK
import AVFoundation
import AVKit
import Accelerate
import AnyCodable
import CoreGraphics
import CoreImage
import CoreText
import CoreVideo
import DeveloperToolsSupport
import DropDown
import Foundation
import Fuse
import IQKeyboardManagerSwift
import Kingfisher
import Reachability
import SQLite
import SVGKit
import Sentry
import Swift
import SwiftUI
import TensorFlowLite
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol ClearQuoteSDKDelegate {
  func inspectionCompletionStatus(identifier: Swift.String, message: Swift.String, code: Swift.Int, isOffline: Swift.Bool, serverQuoteId: Swift.String?, serverInspectionId: Swift.String?)
}
@_hasMissingDesignatedInitializers public class ClearQuote {
  public static let shared: ClearQuoteSDK.ClearQuote
  public var versionInQuoteDetails: (Swift.String)
  public var isOffline: Swift.Bool
  public var clientAttrs: ClearQuoteSDK.CQSDKClientAttrs
  public var clearQuoteSdkDelegate: (any ClearQuoteSDK.ClearQuoteSDKDelegate)?
  public func initSDKNoBaseVc(key: Swift.String, region: Swift.String? = nil, result: @escaping (_ isInitialized: Swift.Bool, _ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func initSDK(baseVC: UIKit.UIViewController, key: Swift.String, region: Swift.String? = nil, result: @escaping (_ isInitialized: Swift.Bool, _ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func isClientAttrsEqual(previousClientAttrs: ClearQuoteSDK.CQSDKClientAttrs?, latestClientAttrs: ClearQuoteSDK.CQSDKClientAttrs?) -> Swift.Bool
  public func startInspection(baseVC: UIKit.UIViewController, clearQuoteSdkDelegate: any ClearQuoteSDK.ClearQuoteSDKDelegate, clientAttrs: ClearQuoteSDK.CQSDKClientAttrs? = nil, inputDetails: ClearQuoteSDK.CQSDKInputDetails? = nil, userFlowParams: ClearQuoteSDK.CQSDKUserFlowParams? = nil, result: @escaping (_ inspectionStarted: Swift.Bool, _ message: Swift.String, _ code: Swift.Int) -> Swift.Void)
  public func isCQSDKInitialized() -> Swift.Bool
  public func checkRegistrationNumberExistsInFleetList(regNumber: Swift.String, completion: @escaping (_ isLPValid: Swift.Bool?, _ msg: Swift.String, _ tripDetailsApiResponse: ClearQuoteSDK.CQSDKV3Vehicle?) -> Swift.Void)
  public func logout()
  public func getQuoteCreationController(hideTopBar: Swift.Bool = true) -> ClearQuoteSDK.CQSDKQuoteCreationParentViewController?
  public func getCurrentDealerCode() -> Swift.String?
  public func getCurrentUserName() -> Swift.String?
  public func getCurrentSDKKey() -> Swift.String
  public func getCurrentSDKVersion() -> Swift.String
  public func getCurrentClientAttrsUserName() -> Swift.String?
  public func getCurrentClientAttrsDealer() -> Swift.String?
  public func getCurrentClientAttrsDealerIdentifier() -> Swift.String?
  public func getCurrentClientAttrsClientUniqueId() -> Swift.String?
  public func CheckSpeedTest(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func getV3VehicleDetailsByLicencePlateNumber(_ licencePlatno: Swift.String) -> [ClearQuoteSDK.CQSDKMakeModel]
  public func startReachabilityNotifier()
  public func stopReachabilityNotifier()
  public func getOverlayImageModel(bodystyle: Swift.String, index: Swift.Int) -> ClearQuoteSDK.CQSDKOverlayModel?
  public func showQuoteDetails(inspectionId: Swift.String, baseVC: UIKit.UIViewController, onClose: (() -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQSDKUIButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setText(txt: Swift.String)
  @_Concurrency.MainActor(unsafe) public func disable()
  @_Concurrency.MainActor(unsafe) public func enable()
  @_Concurrency.MainActor(unsafe) public func leftIcon()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQSDKUIOutlinedButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setOverlaysCounterUI()
  @_Concurrency.MainActor(unsafe) public func setText(txt: Swift.String)
  @_Concurrency.MainActor(unsafe) public func disable()
  @_Concurrency.MainActor(unsafe) public func enable()
  @objc deinit
}
public enum CQSDKTextStyle {
  case h1
  case h2
  case h3
  case h4
  case h5
  case h6
  case s1
  case s2
  case p1
  case p2
  case c1
  case c2
  case label
  case giant
  case large
  case medium
  case small
  case tiny
  public func asUIFont() -> UIKit.UIFont
  public static func == (a: ClearQuoteSDK.CQSDKTextStyle, b: ClearQuoteSDK.CQSDKTextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CQSDKV3Vehicle : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CQSDKCustomerInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQSDKInputField : UIKit.UIView, UIKit.UITextFieldDelegate, ClearQuoteSDK.CQSDKNibLoadable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var ipField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func hidePassword()
  @_Concurrency.MainActor(unsafe) public func showPassword()
  @_Concurrency.MainActor(unsafe) public func hideLabel()
  @_Concurrency.MainActor(unsafe) public func setLabel(txt: Swift.String, isMandatory: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setPlaceholder(txt: Swift.String)
  @_Concurrency.MainActor(unsafe) public func getInputValue() -> Swift.String
  @_Concurrency.MainActor(unsafe) public func setValue(txt: Swift.String)
  @_Concurrency.MainActor(unsafe) public func disableInput()
  @_Concurrency.MainActor(unsafe) public func enableInput()
  @_Concurrency.MainActor(unsafe) public func setErrorMsg(msg: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setSuccessMsg(msg: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setKeyboardType(keyboardType: UIKit.UIKeyboardType)
  @_Concurrency.MainActor(unsafe) public func setOnBeforeTextChanges(onBeforeTextChangesTemp: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor(unsafe) public func setAfterTextChanges(onAfterTextChangesTemp: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor(unsafe) public func clearError(msg: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func showError(msg: Swift.String? = nil, onlyErrorIcon: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setAsDropdown(onSelectionChanged: @escaping () -> (), isStrictDropdown: Swift.Bool = false, showDropdownIcon: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setDropdownItems(items: [Swift.String])
  @_Concurrency.MainActor(unsafe) public func showDropdown()
  @_Concurrency.MainActor(unsafe) public func setAddItemButtonInDropdown(onClickBtnAddItemTemp: @escaping () -> (), btnText: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setOnClick(onClick: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func setLeftIcon(uiImage: UIKit.UIImage?, onTap: @escaping () -> (), width: Swift.Int = 20, height: Swift.Int = 20, paddingFromLeft: Swift.Int = 10)
  @_Concurrency.MainActor(unsafe) public func setRightIcon(uiImage: UIKit.UIImage?, onTap: @escaping () -> (), width: Swift.Int = 20, height: Swift.Int = 20, paddingFromRight: Swift.Int = 10)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc deinit
}
public protocol CQSDKNibLoadable {
  static var nibName: Swift.String { get }
}
extension ClearQuoteSDK.CQSDKNibLoadable where Self : UIKit.UIView {
  public static var nibName: Swift.String {
    get
  }
  public static var nib: UIKit.UINib {
    get
  }
  public func setupFromNib()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CQSDKInputPageOneViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CQSDKToastDuration : Swift.Double {
  case short
  case long
  public init?(rawValue: Swift.Double)
  public typealias RawValue = Swift.Double
  public var rawValue: Swift.Double {
    get
  }
}
public enum CQSDKColors : Swift.String {
  case cq_sdk_disabled_button_color
  case cq_sdk_disabled_color
  case cq_sdk_divider_color
  case cq_sdk_input_field_label_text_color
  case cq_sdk_text_color
  case cq_sdk_white
  case cq_sdk_image_bg_color
  case cq_sdk_app_bar_icon_disabled_color
  case cq_sdk_dark_green
  case cq_sdk_overlay_red
  case cq_sdk_overlay_green
  case cq_sdk_rtd_message_background_color
  public func asUIColor() -> UIKit.UIColor?
  public func asCGColor() -> CoreGraphics.CGColor?
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) public func scaleIndicator(factor: CoreFoundation.CGFloat)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setDefaultDialogCornerRadius()
}
public struct CQSDKOverlayModel {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQSDKUILabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setText(txt: Swift.String, isMandatory: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setStyle(_ style: ClearQuoteSDK.CQSDKTextStyle, labelColor: ClearQuoteSDK.CQSDKColors? = nil)
  @_Concurrency.MainActor(unsafe) public func setCornerRadius(_ radius: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQIconButton : UIKit.UIButton {
  @objc deinit
}
public protocol CQSDKAppBarViewDelegate {
  func onTappedCross()
  func onTappedHamburger()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CQSDKAppBarView : UIKit.UIView, ClearQuoteSDK.CQSDKNibLoadable {
  @_Concurrency.MainActor(unsafe) public var delegate: (any ClearQuoteSDK.CQSDKAppBarViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setDealerLogo(url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func hideCrossBtn()
  @_Concurrency.MainActor(unsafe) public func hideHamburgerBtn()
  @objc deinit
}
public struct CQSDKInputDetails {
  public init(customerDetails: ClearQuoteSDK.CQSDKCustomerDetails? = nil, vehicleDetails: ClearQuoteSDK.CQSDKVehicleDetails? = nil, quoteData: ClearQuoteSDK.CQSDKQuoteData? = nil)
}
public struct CQSDKQuoteData {
  public init(inspectionType: Swift.String?, fleetImageType: Swift.String?)
}
public struct CQSDKCustomerDetails {
  public init(name: Swift.String? = nil, email: Swift.String? = nil, dialCode: Swift.String? = nil, phoneNumber: Swift.String? = nil)
}
public struct CQSDKVehicleDetails {
  public init(regNumber: Swift.String? = nil, make: Swift.String? = nil, model: Swift.String? = nil, bodyStyle: Swift.String? = nil, fuelType: Swift.String? = nil, variant: Swift.String? = nil)
}
public struct CQSDKClientAttrs : Swift.Codable, Swift.Equatable {
  public init(userName: Swift.String? = nil, dealer: Swift.String? = nil, dealerIdentifier: Swift.String? = nil, client_unique_id: Swift.String? = nil)
  public static func == (a: ClearQuoteSDK.CQSDKClientAttrs, b: ClearQuoteSDK.CQSDKClientAttrs) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CQSDKUserFlowParams : Swift.Encodable {
  public init(isOffline: Swift.Bool? = nil, skipInputPage: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CQSDKMakeModel {
  public var _id: Swift.String
  public var make: Swift.String
  public var model: Swift.String
  public var bodystyle: Swift.String
  public var cq_bodystyle: Swift.String
  public var licenseplateno: Swift.String?
  public var vin: Swift.String?
  public var vehicleId: Swift.String?
  public var vehicleUnitNo: Swift.String?
  public var rAno: Swift.String?
  public var sequenceno: Swift.String?
  public var tripStatus: Swift.String?
  public var fleetNo: Swift.String?
  public var rentalStatus: Swift.String?
  public var Contracttype: Swift.String?
  public var year: Swift.String?
  public var fuelIn: Swift.String?
  public var cuOdo: Swift.String?
  public var status: Swift.String?
  public var nskm: Swift.String?
  public var VehicleStatus: Swift.String?
  public var customerInfo: Swift.String?
  public var vehicleVersion: Swift.String?
  public var fueltype: Swift.String?
}
public struct SVGImgProcessor : Kingfisher.ImageProcessor {
  public var identifier: Swift.String
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CQSDKQuoteCreationParentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ClearQuoteSDK.CQSDKQuoteCreationParentViewController : ClearQuoteSDK.CQSDKAppBarViewDelegate {
  @_Concurrency.MainActor(unsafe) public func onTappedCross()
  @_Concurrency.MainActor(unsafe) public func onTappedHamburger()
}
public let ClearQuoteIdentifier: Swift.String
public enum CQSDKInspectionCompletionStatus {
}
public let buttonCornerRadius: Swift.Double
extension ClearQuoteSDK.CQSDKTextStyle : Swift.Equatable {}
extension ClearQuoteSDK.CQSDKTextStyle : Swift.Hashable {}
extension ClearQuoteSDK.CQSDKToastDuration : Swift.Equatable {}
extension ClearQuoteSDK.CQSDKToastDuration : Swift.Hashable {}
extension ClearQuoteSDK.CQSDKToastDuration : Swift.RawRepresentable {}
extension ClearQuoteSDK.CQSDKColors : Swift.Equatable {}
extension ClearQuoteSDK.CQSDKColors : Swift.Hashable {}
extension ClearQuoteSDK.CQSDKColors : Swift.RawRepresentable {}
